# ASSIGNMENT NO 3

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.
We are asked to tweak the Xv6 operating system as a part of this assignment

## ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

## Execution of kernel
- use following commands to execute kernal

for Round Robin
```shell
make clean
make qemu 

```
for FCFS
```shell
make clean
make qemu SCHEDULER=FCFS 

```

for PBS
```shell
make clean
make qemu SCHEDULER=PBS 

```

for MLFQ
```shell
make clean
make qemu SCHEDULER=MLFQ 

```

## Requirement 1
### Overview
- Add the system call trace and an accompanying user program strace.

### Execution

```shell
strace 32 grep hello README
```

### Steps
- Makefile Enhancement
- Parent-Child Trace Mask Propagation:`np->tracemask = p->mask;`
- New System Call Implementation:
- Syscall Function Enhancement:
- Developed a user program located in the user folder, specifically in
`user/strace.c`, to serve as the main component of the strace program.
- Implemented logic to handle various command-line argument cases.
- Integration with Makefile:

## Requirement 2
### Overview
- Add the system call trace and an accompanying user program strace.

### Execution

```shell
as given above 
```

### Steps
- Default Scheduler Configuration:
#### FCFS Scheduling Implementation:

-- FCFS selects the process with the least creation time, determined by the tick
number corresponding to when the process was created. This selected process
continues execution until it is terminated.
- Makefile Modification:
- The Makefile has been modified to support the 'SCHEDULER' macro for compiling
the specified scheduling algorithm.
- Addition of 'timeOfCreation' Variable:
- The 'timeOfCreation' variable is initialized to 0 within the 'allocproc()' function
located in 'kernel/proc.c.'
- Scheduling Functionality Implementation:
- The scheduling functionality has been implemented in the 'scheduler()' function
within 'kernel/proc.c.' This function selects the process with the least
'timeOfCreation' value from all available processes.
- Disabling 'yield()' in FCFS:

#### Priority based scheduling

- Integration of Variables in 'struct proc':‚ùñ To support PBS, the following variables were added to the 'struct proc' in
'kernel/proc.h':
- Implementation of PBS Scheduling:
- The scheduling functionality for PBS was introduced, which calculates the
dynamic priority of processes based on their static priority and 'niceness' value.
- 'niceness' is computed 
- The dynamic priority is determined
- Addition of 'set_priority()' Function
- A user program named 'user/setpriority.c' was created to allow users to set
process priorities.
- Introduction of 'sys_set_priority()' System Call:

#### MLFQ scheduling

- Add fields to the struct proc in kernel/proc.h to store information needed
for MLFQ scheduling, such as queue index and statistics for each queue. 
- Initialize MLFQ Parameters:
- Initialized the queue-related fields and other necessary variables during process
creation in the allocproc() function in kernel/proc.c.
- Scheduler Function in proc.c:
- It should consider queue priorities , demotion/promotion of processes, and
queue rotation.
- Implemented queue management functions to move processes between queues
based on their behavior
- Implemented a time quantum management, where each queue has a different
time quantum. After a process exhausts its time quantum, it is moved to a
lower-priority queue (as per given in the question time quantum in each Queue i =
2 * i).
- Add System Calls:
- User Programs


## Requirement 3
### Overview
- Add the system call trace and an accompanying user program strace.

### Execution

```shell
schedulertest
```

### Steps
- Integration of 'user/schedulertest' Program:
- In the absence of user-defined preferences, a default scheduling algorithm
(Round Robin) has been established to ensure smooth kernel operation.
- Enhanced 'procdump' Functionality:
- Refinement of the 'procdump' Function:
- The 'procdump' function has undergone further refinement to improve its overall
performance and functionality.
- Display of Scheduler Performance Metrics

#### Conclusion:
Clearly, FCFS exhibits the poorest performance, as it can result in increased waiting
times for all other processes if a CPU-bound process with a longer execution time is
scheduled first.
MLFQ is performing best then PBS coming in a close second, and Round Robin
following behind.
These findings were derived from the benchmark program user/schedulertest.c.